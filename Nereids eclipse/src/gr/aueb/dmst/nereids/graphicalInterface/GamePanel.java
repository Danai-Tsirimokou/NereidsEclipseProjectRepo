package gr.aueb.dmst.nereids.graphicalInterface;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;

/*
 * GamePlay Panel
 * This is the panel that displays the main game of "Nereids",
 * where the player controls the boat using the arrow keys
 * and will have to choose between 3 obstacles to encounter
 * each time for 8 times in order to reach Sicily.
 */

@SuppressWarnings("serial")
public class GamePanel extends JPanel implements Runnable {

	/** screen settings */
	final int originalTileSize = 16;
	final int scale = 3;
	final int tileSize = originalTileSize * scale; // 48x48 tile
	final int maxScreenCol = 18;
	final int maxScreenRow = 12;
	final int screenWidth = tileSize * maxScreenCol; // 864 pixels
	final int screenHeight = tileSize * maxScreenRow; // 576 pixels

	/** map settings */
	final int maxMapCol = 177;
	final int maxMapRow = 12;	

	/** FramesPerSecond */
	int FPS = 40;

	/** tools */
	TileManager tileM = new TileManager(this);
	KeyHandler keyH = new KeyHandler();
	CollisionChecker checker = new CollisionChecker(this);
	ObstacleSetter obsSetter = new ObstacleSetter(this);
	Sound music = new Sound();
	Sound sound = new Sound();
	UI ui = new UI(this);

	/** game thread */
	Thread gameThread;

	/** moving objects */
	Boat boat; // controlled by player
	Obstacle[] screenObs = new Obstacle[3]; // auto-generated by game

	/** score */
	int score = 5;
	
	public GamePanel(int[] totalChars) {
		boat = new Boat(this, keyH, totalChars);
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
	}

	public void setupGame() {
		obsSetter.setObstacle();
		playMusic(0);
		startGameThread();
	}

	public void startGameThread() {
		try {
			gameThread = new Thread(this);
			gameThread.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		double drawInterval = 1000000000 / FPS; // 0.0166
		double nextDrawTime = System.nanoTime() + drawInterval;
		double remainingTime;
		/** game loop */
		while(gameThread != null) {	
			update();
			repaint();
			try {
				remainingTime = nextDrawTime - System.nanoTime();
				remainingTime = remainingTime / 1000000;
				remainingTime = (remainingTime < 0 ? 0 : remainingTime);
				Thread.sleep((long) remainingTime);
				nextDrawTime += drawInterval;
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public void pause() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public void update() {
		boat.update();
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		//long drawStart = System.nanoTime(); // use for drawing time optimization
		tileM.draw(g2);
		for (int i = 0; i < 3; i++) {
			if (screenObs[i] != null) {
				screenObs[i].draw(g2);
			}
		}
		boat.draw(g2);
		ui.draw(g2);
		//long drawEnd = System.nanoTime(); // use for drawing time optimization
		//long passed = drawEnd - drawStart; // use for drawing time optimization
		//System.out.println("Draw time that has passed :" + passed); // use for drawing time optimization
		g2.dispose();
	}
	
	public void playMusic(int i) {
		music.setFile(i);
		music.play();
		music.loop();
	}
	
	public void stopMusic() {
		music.stop();
	}
	
	public void playSE(int i) {
		sound.setFile(i);
		sound.play();
	}
}
